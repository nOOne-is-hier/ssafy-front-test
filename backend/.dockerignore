# flyctl launch added from backend\.gitignore
backend\**\.env*


# Created by https://www.toptal.com/developers/gitignore/api/node
# Edit at https://www.toptal.com/developers/gitignore?templates=node

### Node ###
# Logs
backend\**\logs
backend\**\*.log
backend\**\npm-debug.log*
backend\**\yarn-debug.log*
backend\**\yarn-error.log*
backend\**\lerna-debug.log*
backend\**\.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
backend\**\report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
backend\**\pids
backend\**\*.pid
backend\**\*.seed
backend\**\*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
backend\**\lib-cov

# Coverage directory used by tools like istanbul
backend\**\coverage
backend\**\*.lcov

# nyc test coverage
backend\**\.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
backend\**\.grunt

# Bower dependency directory (https://bower.io/)
backend\**\bower_components

# node-waf configuration
backend\**\.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
backend\**\build\Release

# Dependency directories
backend\**\node_modules
backend\**\jspm_packages

# Snowpack dependency directory (https://snowpack.dev/)
backend\**\web_modules

# TypeScript cache
backend\**\*.tsbuildinfo

# Optional npm cache directory
backend\**\.npm

# Optional eslint cache
backend\**\.eslintcache

# Optional stylelint cache
backend\**\.stylelintcache

# Microbundle cache
backend\**\.rpt2_cache
backend\**\.rts2_cache_cjs
backend\**\.rts2_cache_es
backend\**\.rts2_cache_umd

# Optional REPL history
backend\**\.node_repl_history

# Output of 'npm pack'
backend\**\*.tgz

# Yarn Integrity file
backend\**\.yarn-integrity

# dotenv environment variable files
backend\**\.env
backend\**\.env.development.local
backend\**\.env.test.local
backend\**\.env.production.local
backend\**\.env.local

# parcel-bundler cache (https://parceljs.org/)
backend\**\.cache
backend\**\.parcel-cache

# Next.js build output
backend\**\.next
backend\**\out

# Nuxt.js build / generate output
backend\**\.nuxt
backend\**\dist

# Gatsby files
backend\**\.cache
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
backend\**\.vuepress\dist

# vuepress v2.x temp and cache directory
backend\**\.temp

# Docusaurus cache and generated files
backend\**\.docusaurus

# Serverless directories
backend\**\.serverless

# FuseBox cache
backend\**\.fusebox

# DynamoDB Local files
backend\**\.dynamodb

# TernJS port file
backend\**\.tern-port

# Stores VSCode versions used for testing VSCode extensions
backend\**\.vscode-test

# yarn v2
backend\**\.yarn\cache
backend\**\.yarn\unplugged
backend\**\.yarn\build-state.yml
backend\**\.yarn\install-state.gz
backend\**\.pnp.*

### Node Patch ###
# Serverless Webpack directories
backend\**\.webpack

# Optional stylelint cache

# SvelteKit build / generate output
backend\**\.svelte-kit

# End of https://www.toptal.com/developers/gitignore/api/node

# Created by https://www.toptal.com/developers/gitignore/api/macos,python,visualstudiocode
# Edit at https://www.toptal.com/developers/gitignore?templates=macos,python,visualstudiocode

### macOS ###
# General
backend\**\.DS_Store
backend\**\.AppleDouble
backend\**\.LSOverride

# Icon must end with two \r
backend\**\Icon


# Thumbnails
backend\**\._*

# Files that might appear in the root of a volume
backend\**\.DocumentRevisions-V100
backend\**\.fseventsd
backend\**\.Spotlight-V100
backend\**\.TemporaryItems
backend\**\.Trashes
backend\**\.VolumeIcon.icns
backend\**\.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
backend\**\.AppleDB
backend\**\.AppleDesktop
backend\**\Network Trash Folder
backend\**\Temporary Items
backend\**\.apdisk

### macOS Patch ###
# iCloud generated files
backend\**\*.icloud

### Python ###
# Byte-compiled / optimized / DLL files
backend\**\__pycache__
backend\**\*.py[cod]
backend\**\*$py.class

# C extensions
backend\**\*.so

# Distribution / packaging
backend\**\.Python
backend\**\build
backend\**\develop-eggs
backend\**\dist
backend\**\downloads
backend\**\eggs
backend\**\.eggs
backend\**\lib
backend\**\lib64
backend\**\parts
backend\**\sdist
backend\**\var
backend\**\wheels
backend\**\share\python-wheels
backend\**\*.egg-info
backend\**\.installed.cfg
backend\**\*.egg
backend\**\MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
backend\**\*.manifest
backend\**\*.spec

# Installer logs
backend\**\pip-log.txt
backend\**\pip-delete-this-directory.txt

# Unit test / coverage reports
backend\**\htmlcov
backend\**\.tox
backend\**\.nox
backend\**\.coverage
backend\**\.coverage.*
backend\**\.cache
backend\**\nosetests.xml
backend\**\coverage.xml
backend\**\*.cover
backend\**\*.py,cover
backend\**\.hypothesis
backend\**\.pytest_cache
backend\**\cover

# Translations
backend\**\*.mo
backend\**\*.pot

# Django stuff:
backend\**\*.log
backend\**\local_settings.py
backend\**\db.sqlite3
backend\**\db.sqlite3-journal

# Flask stuff:
backend\**\instance
backend\**\.webassets-cache

# Scrapy stuff:
backend\**\.scrapy

# Sphinx documentation
backend\**\docs\_build

# PyBuilder
backend\**\.pybuilder
backend\**\target

# Jupyter Notebook
backend\**\.ipynb_checkpoints

# IPython
backend\**\profile_default
backend\**\ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# poetry
#   Similar to Pipfile.lock, it is generally recommended to include poetry.lock in version control.
#   This is especially recommended for binary packages to ensure reproducibility, and is more
#   commonly ignored for libraries.
#   https://python-poetry.org/docs/basic-usage/#commit-your-poetrylock-file-to-version-control
#poetry.lock

# pdm
#   Similar to Pipfile.lock, it is generally recommended to include pdm.lock in version control.
#pdm.lock
#   pdm stores project-wide configurations in .pdm.toml, but it is recommended to not include it
#   in version control.
#   https://pdm.fming.dev/#use-with-ide
backend\**\.pdm.toml

# PEP 582; used by e.g. github.com/David-OConnor/pyflow and github.com/pdm-project/pdm
backend\**\__pypackages__

# Celery stuff
backend\**\celerybeat-schedule
backend\**\celerybeat.pid

# SageMath parsed files
backend\**\*.sage.py

# Environments
backend\**\.env
backend\**\.venv
backend\**\env
backend\**\venv
backend\**\ENV
backend\**\env.bak
backend\**\venv.bak

# Spyder project settings
backend\**\.spyderproject
backend\**\.spyproject

# Rope project settings
backend\**\.ropeproject

# mkdocs documentation
backend\site

# mypy
backend\**\.mypy_cache
backend\**\.dmypy.json
backend\**\dmypy.json

# Pyre type checker
backend\**\.pyre

# pytype static type analyzer
backend\**\.pytype

# Cython debug symbols
backend\**\cython_debug

# PyCharm
#  JetBrains specific template is maintained in a separate JetBrains.gitignore that can
#  be found at https://github.com/github/gitignore/blob/main/Global/JetBrains.gitignore
#  and can be added to the global gitignore or merged into this file.  For a more nuclear
#  option (not recommended) you can uncomment the following to ignore the entire idea folder.
#.idea/

### Python Patch ###
# Poetry local configuration file - https://python-poetry.org/docs/configuration/#local-configuration
backend\**\poetry.toml

# ruff
backend\**\.ruff_cache

# LSP config files
backend\**\pyrightconfig.json

### VisualStudioCode ###
backend\**\.vscode\*
!backend\**\.vscode\settings.json
!backend\**\.vscode\tasks.json
!backend\**\.vscode\launch.json
!backend\**\.vscode\extensions.json
!backend\**\.vscode\*.code-snippets

# Local History for Visual Studio Code
backend\**\.history

# Built Visual Studio Code Extensions
backend\**\*.vsix

### VisualStudioCode Patch ###
# Ignore all local history of files
backend\**\.history
backend\**\.ionide

# End of https://www.toptal.com/developers/gitignore/api/macos,python,visualstudiocode


# flyctl launch added from frontend\.gitignore
# Created by https://www.toptal.com/developers/gitignore/api/macos,linux,visualstudiocode,node
# Edit at https://www.toptal.com/developers/gitignore?templates=macos,linux,visualstudiocode,node

### Linux ###
frontend\**\*~

# temporary files which can be created if a process still has a handle open of a deleted file
frontend\**\.fuse_hidden*

# KDE directory preferences
frontend\**\.directory

# Linux trash folder which might appear on any partition or disk
frontend\**\.Trash-*

# .nfs files are created when an open file is removed but is still being accessed
frontend\**\.nfs*

### macOS ###
# General
frontend\**\.DS_Store
frontend\**\.AppleDouble
frontend\**\.LSOverride

# Icon must end with two \r
frontend\**\Icon

# Thumbnails
frontend\**\._*

# Files that might appear in the root of a volume
frontend\**\.DocumentRevisions-V100
frontend\**\.fseventsd
frontend\**\.Spotlight-V100
frontend\**\.TemporaryItems
frontend\**\.Trashes
frontend\**\.VolumeIcon.icns
frontend\**\.com.apple.timemachine.donotpresent

# Directories potentially created on remote AFP share
frontend\**\.AppleDB
frontend\**\.AppleDesktop
frontend\**\Network Trash Folder
frontend\**\Temporary Items
frontend\**\.apdisk

### macOS Patch ###
# iCloud generated files
frontend\**\*.icloud

### Node ###
# Logs
frontend\**\logs
frontend\**\*.log
frontend\**\npm-debug.log*
frontend\**\yarn-debug.log*
frontend\**\yarn-error.log*
frontend\**\lerna-debug.log*
frontend\**\.pnpm-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
frontend\**\report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
frontend\**\pids
frontend\**\*.pid
frontend\**\*.seed
frontend\**\*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
frontend\**\lib-cov

# Coverage directory used by tools like istanbul
frontend\**\coverage
frontend\**\*.lcov

# nyc test coverage
frontend\**\.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
frontend\**\.grunt

# Bower dependency directory (https://bower.io/)
frontend\**\bower_components

# node-waf configuration
frontend\**\.lock-wscript

# Compiled binary addons (https://nodejs.org/api/addons.html)
frontend\**\build\Release

# Dependency directories
frontend\**\node_modules
frontend\**\jspm_packages

# Snowpack dependency directory (https://snowpack.dev/)
frontend\**\web_modules

# TypeScript cache
frontend\**\*.tsbuildinfo

# Optional npm cache directory
frontend\**\.npm

# Optional eslint cache
frontend\**\.eslintcache

# Optional stylelint cache
frontend\**\.stylelintcache

# Microbundle cache
frontend\**\.rpt2_cache
frontend\**\.rts2_cache_cjs
frontend\**\.rts2_cache_es
frontend\**\.rts2_cache_umd

# Optional REPL history
frontend\**\.node_repl_history

# Output of 'npm pack'
frontend\**\*.tgz

# Yarn Integrity file
frontend\**\.yarn-integrity

# dotenv environment variable files
frontend\**\.env
frontend\**\.env.development.local
frontend\**\.env.test.local
frontend\**\.env.production.local
frontend\**\.env.local

# parcel-bundler cache (https://parceljs.org/)
frontend\**\.cache
frontend\**\.parcel-cache

# Next.js build output
frontend\**\.next
frontend\**\out

# Nuxt.js build / generate output
frontend\**\.nuxt
frontend\**\dist

# Gatsby files
frontend\**\.cache
# Comment in the public line in if your project uses Gatsby and not Next.js
# https://nextjs.org/blog/next-9-1#public-directory-support
# public

# vuepress build output
frontend\**\.vuepress\dist

# vuepress v2.x temp and cache directory
frontend\**\.temp

# Docusaurus cache and generated files
frontend\**\.docusaurus

# Serverless directories
frontend\**\.serverless

# FuseBox cache
frontend\**\.fusebox

# DynamoDB Local files
frontend\**\.dynamodb

# TernJS port file
frontend\**\.tern-port

# Stores VSCode versions used for testing VSCode extensions
frontend\**\.vscode-test

# yarn v2
frontend\**\.yarn\cache
frontend\**\.yarn\unplugged
frontend\**\.yarn\build-state.yml
frontend\**\.yarn\install-state.gz
frontend\**\.pnp.*

### Node Patch ###
# Serverless Webpack directories
frontend\**\.webpack

# Optional stylelint cache

# SvelteKit build / generate output
frontend\**\.svelte-kit

### VisualStudioCode ###
frontend\**\.vscode\*
!frontend\**\.vscode\settings.json
!frontend\**\.vscode\tasks.json
!frontend\**\.vscode\launch.json
!frontend\**\.vscode\extensions.json
!frontend\**\.vscode\*.code-snippets

# Local History for Visual Studio Code
frontend\**\.history

# Built Visual Studio Code Extensions
frontend\**\*.vsix

### VisualStudioCode Patch ###
# Ignore all local history of files
frontend\**\.history
frontend\**\.ionide

# End of https://www.toptal.com/developers/gitignore/api/macos,linux,visualstudiocode,node
fly.toml
